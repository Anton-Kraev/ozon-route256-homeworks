// Code generated by MockGen. DO NOT EDIT.
// Source: ./service.go

// Package wrap is a generated GoMock package.
package wrap

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	wrap "gitlab.ozon.dev/antonkraeww/homeworks/hw-5/internal/models/domain/wrap"
)

// MockwrapRepository is a mock of wrapRepository interface.
type MockwrapRepository struct {
	ctrl     *gomock.Controller
	recorder *MockwrapRepositoryMockRecorder
}

// MockwrapRepositoryMockRecorder is the mock recorder for MockwrapRepository.
type MockwrapRepositoryMockRecorder struct {
	mock *MockwrapRepository
}

// NewMockwrapRepository creates a new mock instance.
func NewMockwrapRepository(ctrl *gomock.Controller) *MockwrapRepository {
	mock := &MockwrapRepository{ctrl: ctrl}
	mock.recorder = &MockwrapRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockwrapRepository) EXPECT() *MockwrapRepositoryMockRecorder {
	return m.recorder
}

// AddWrap mocks base method.
func (m *MockwrapRepository) AddWrap(ctx context.Context, wrap wrap.Wrap) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWrap", ctx, wrap)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddWrap indicates an expected call of AddWrap.
func (mr *MockwrapRepositoryMockRecorder) AddWrap(ctx, wrap interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWrap", reflect.TypeOf((*MockwrapRepository)(nil).AddWrap), ctx, wrap)
}

// GetWrapByName mocks base method.
func (m *MockwrapRepository) GetWrapByName(ctx context.Context, name string) (*wrap.Wrap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWrapByName", ctx, name)
	ret0, _ := ret[0].(*wrap.Wrap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWrapByName indicates an expected call of GetWrapByName.
func (mr *MockwrapRepositoryMockRecorder) GetWrapByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWrapByName", reflect.TypeOf((*MockwrapRepository)(nil).GetWrapByName), ctx, name)
}
