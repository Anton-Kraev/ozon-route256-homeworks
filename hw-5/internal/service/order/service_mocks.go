// Code generated by MockGen. DO NOT EDIT.
// Source: ./service.go

// Package order is a generated GoMock package.
package order

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	order "gitlab.ozon.dev/antonkraeww/homeworks/hw-5/internal/models/domain/order"
	wrap "gitlab.ozon.dev/antonkraeww/homeworks/hw-5/internal/models/domain/wrap"
)

// MockorderRepository is a mock of orderRepository interface.
type MockorderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockorderRepositoryMockRecorder
}

// MockorderRepositoryMockRecorder is the mock recorder for MockorderRepository.
type MockorderRepositoryMockRecorder struct {
	mock *MockorderRepository
}

// NewMockorderRepository creates a new mock instance.
func NewMockorderRepository(ctrl *gomock.Controller) *MockorderRepository {
	mock := &MockorderRepository{ctrl: ctrl}
	mock.recorder = &MockorderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockorderRepository) EXPECT() *MockorderRepositoryMockRecorder {
	return m.recorder
}

// AddOrder mocks base method.
func (m *MockorderRepository) AddOrder(ctx context.Context, order order.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrder", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOrder indicates an expected call of AddOrder.
func (mr *MockorderRepositoryMockRecorder) AddOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrder", reflect.TypeOf((*MockorderRepository)(nil).AddOrder), ctx, order)
}

// ChangeOrders mocks base method.
func (m *MockorderRepository) ChangeOrders(ctx context.Context, changes []order.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeOrders", ctx, changes)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeOrders indicates an expected call of ChangeOrders.
func (mr *MockorderRepositoryMockRecorder) ChangeOrders(ctx, changes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeOrders", reflect.TypeOf((*MockorderRepository)(nil).ChangeOrders), ctx, changes)
}

// GetOrderByID mocks base method.
func (m *MockorderRepository) GetOrderByID(ctx context.Context, id uint64) (*order.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByID", ctx, id)
	ret0, _ := ret[0].(*order.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByID indicates an expected call of GetOrderByID.
func (mr *MockorderRepositoryMockRecorder) GetOrderByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByID", reflect.TypeOf((*MockorderRepository)(nil).GetOrderByID), ctx, id)
}

// GetOrdersByFilter mocks base method.
func (m *MockorderRepository) GetOrdersByFilter(ctx context.Context, filter order.Filter) ([]order.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersByFilter", ctx, filter)
	ret0, _ := ret[0].([]order.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersByFilter indicates an expected call of GetOrdersByFilter.
func (mr *MockorderRepositoryMockRecorder) GetOrdersByFilter(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersByFilter", reflect.TypeOf((*MockorderRepository)(nil).GetOrdersByFilter), ctx, filter)
}

// GetOrdersByIDs mocks base method.
func (m *MockorderRepository) GetOrdersByIDs(ctx context.Context, ids []uint64) ([]order.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersByIDs", ctx, ids)
	ret0, _ := ret[0].([]order.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersByIDs indicates an expected call of GetOrdersByIDs.
func (mr *MockorderRepositoryMockRecorder) GetOrdersByIDs(ctx, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersByIDs", reflect.TypeOf((*MockorderRepository)(nil).GetOrdersByIDs), ctx, ids)
}

// MockwrapRepository is a mock of wrapRepository interface.
type MockwrapRepository struct {
	ctrl     *gomock.Controller
	recorder *MockwrapRepositoryMockRecorder
}

// MockwrapRepositoryMockRecorder is the mock recorder for MockwrapRepository.
type MockwrapRepositoryMockRecorder struct {
	mock *MockwrapRepository
}

// NewMockwrapRepository creates a new mock instance.
func NewMockwrapRepository(ctrl *gomock.Controller) *MockwrapRepository {
	mock := &MockwrapRepository{ctrl: ctrl}
	mock.recorder = &MockwrapRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockwrapRepository) EXPECT() *MockwrapRepositoryMockRecorder {
	return m.recorder
}

// GetWrapByName mocks base method.
func (m *MockwrapRepository) GetWrapByName(ctx context.Context, name string) (*wrap.Wrap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWrapByName", ctx, name)
	ret0, _ := ret[0].(*wrap.Wrap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWrapByName indicates an expected call of GetWrapByName.
func (mr *MockwrapRepositoryMockRecorder) GetWrapByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWrapByName", reflect.TypeOf((*MockwrapRepository)(nil).GetWrapByName), ctx, name)
}

// MockhashGenerator is a mock of hashGenerator interface.
type MockhashGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockhashGeneratorMockRecorder
}

// MockhashGeneratorMockRecorder is the mock recorder for MockhashGenerator.
type MockhashGeneratorMockRecorder struct {
	mock *MockhashGenerator
}

// NewMockhashGenerator creates a new mock instance.
func NewMockhashGenerator(ctrl *gomock.Controller) *MockhashGenerator {
	mock := &MockhashGenerator{ctrl: ctrl}
	mock.recorder = &MockhashGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockhashGenerator) EXPECT() *MockhashGeneratorMockRecorder {
	return m.recorder
}

// GetHash mocks base method.
func (m *MockhashGenerator) GetHash() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHash")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetHash indicates an expected call of GetHash.
func (mr *MockhashGeneratorMockRecorder) GetHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHash", reflect.TypeOf((*MockhashGenerator)(nil).GetHash))
}
